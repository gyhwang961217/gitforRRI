filter(anomaly == "No") # 이상치가 아닌 값만 필터링
nrow(data4) - nrow(data4_a)
view(data4_a)
data44 <- data4 %>%
left_join(data4_a %>% dplyr::select(날짜, observed), by = "날짜") %>%
mutate(ELm = if_else(!is.na(observed), observed, NA_real_))
#중복데이터 제거하기
data5 <- data44 %>%
distinct(날짜, .keep_all=TRUE)
nrow(data44)-nrow(data5)
df <- merge(data5,rain,by="날짜", all.x=TRUE)
df <- dplyr::select(.data = df, -지점, -지점명)
view(df)
# 시각화----
#원하는 날짜와 시간 설정
#포항
start_date <- as.Date("1900-01-01")
end_date <- as.Date("2024-11-30")
date_sequence <- seq(from = start_date, to = end_date, by = "day")
date_df <- data.frame(날짜 = date_sequence)
start_groundwater <- min(data5$날짜)
fdate_df <- subset(date_df, date_df$날짜>=start_groundwater)
data5 <- merge(fdate_df, data5, by = "날짜", all.x = TRUE)
df1 <- merge(fdate_df, df, by = "날짜", all.x = TRUE)
view(df1)
# 특정 연도만 보고싶을때
#df1<- subset(df, df$연도==2023)
dates <- df1$날짜
groundwater <- df1$ELm
TEMP1 <- df1$`수온(상부)`
TEMP2 <- df1$`수온(하부)`
EC1 <- df1$`전기전도도(상부)`
EC2 <- df1$`전기전도도(하부)`
precipitation <- df1$강수량
view(dates)
ncol(dates)
head(dates)
length(dates)
length(groundwater)
# 주축 (지하수위) 그래프 그리기
par(mar = c(4, 4, 2, 4) + 0.1,    # 네모박스의 바깥 여백 설정 (상, 좌, 하, 우)
xaxs = "i",                    # x축 여백 제거
yaxs = "i")                    # y축 여백 제거
# na.exclude() 사용 후 동일한 길이 유지
plot(dates, groundwater, lwd=2, type="l", col="black",
xaxt="n", ylim=c((min(groundwater, na.rm=TRUE)-2), (max(groundwater, na.rm=TRUE)+2)),
xlab="날짜", ylab="지하수위 (m)")
a<- min(dates)
b<- max(dates)
axis.Date(1, at = seq(from = as.Date(a), to = as.Date(b), by = "1 years"), format = "%y-%m")
a<- min(dates)
b<- as.Date("2024-11-30")
axis.Date(1, at = seq(from = as.Date(a), to = as.Date(b), by = "1 years"), format = "%y-%m")
# 주축 (지하수위) 그래프 그리기
par(mar = c(4, 4, 2, 4) + 0.1,    # 네모박스의 바깥 여백 설정 (상, 좌, 하, 우)
xaxs = "i",                    # x축 여백 제거
yaxs = "i")                    # y축 여백 제거
# na.exclude() 사용 후 동일한 길이 유지
plot(dates, groundwater, lwd=2, type="l", col="black",
xaxt="n", ylim=c((min(groundwater, na.rm=TRUE)-2), (max(groundwater, na.rm=TRUE)+2)),
xlab="날짜", ylab="지하수위 (m)")
a<- min(dates)
b<- as.Date("2024-11-30")
axis.Date(1, at = seq(from = as.Date(a), to = as.Date(b), by = "1 years"), format = "%y-%m")
# 주축 (지하수위) 그래프 그리기
par(mar = c(4, 4, 2, 4) + 0.1,    # 네모박스의 바깥 여백 설정 (상, 좌, 하, 우)
xaxs = "i",                    # x축 여백 제거
yaxs = "i")                    # y축 여백 제거
# na.exclude() 사용 후 동일한 길이 유지
plot(dates, groundwater, lwd=2, type="l", col="black",
xaxt="n", ylim=c((min(groundwater, na.rm=TRUE)-2), (max(groundwater, na.rm=TRUE)+2)),
xlab="날짜", ylab="지하수위 (m)", xlim=c(min(dates), end_date))
a<- min(dates)
b<- as.Date("2024-11-30")
axis.Date(1, at = seq(from = as.Date(a), to = as.Date(b), by = "1 years"), format = "%y-%m")
plot(dates, groundwater, lwd=2, type="l", col="black",
xaxt="n", ylim=c((min(groundwater, na.rm=TRUE)-2), (max(groundwater, na.rm=TRUE)+2)),
xlab="날짜", ylab="지하수위 (m)", xlim=c(min(dates), end_date))
a<- min(dates)
a
min(dates)
year_start <- as.Date(paste(format(a, "%Y"), "-01-01", sep=""))
year_start
b<- max(dates)
b<- max(dates)
year_end <- as.Date(paste(format(b, "%Y"), "-01-01", sep=""))
year_end
axis.Date(1, at = seq(from = year_start, to = year_end, by = "2 years"), format = "%y/%m/%d")
abline(v = seq(from = year_start, to = year_end, by = "2 years"), col="grey", lty=2)
abline(v = seq(from = year_start, to = year_end, by = "2 years"), col="grey", lty=1)
plot(dates, groundwater, lwd=2, type="l", col="black",
xaxt="n", ylim=c((min(groundwater, na.rm=TRUE)-2), (max(groundwater, na.rm=TRUE)+2)),
xlab="날짜", ylab="지하수위 (m)", xlim=c(year_start, end_date))
a<- min(dates)
b<- max(dates)
year_start <- as.Date(paste(format(a, "%Y"), "-01-01", sep=""))
year_start
year_end <- as.Date(paste(format(b, "%Y"), "-01-01", sep=""))
year_end
axis.Date(1, at = seq(from = year_start, to = year_end, by = "2 years"), format = "%y/%m/%d")
abline(v = seq(from = year_start, to = year_end, by = "2 years"), col="grey", lty=1)
plot(dates, groundwater, lwd=2, type="l", col="black",
xaxt="n", ylim=c((min(groundwater, na.rm=TRUE)-2), (max(groundwater, na.rm=TRUE)+2)),
xlab="날짜", ylab="지하수위 (m)", xlim=c(year_start, b))
year_start <- as.Date(paste(format(a, "%Y"), "-01-01", sep=""))
year_start
year_end <- as.Date(paste(format(b, "%Y"), "-01-01", sep=""))
year_end
axis.Date(1, at = seq(from = year_start, to = year_end, by = "2 years"), format = "%y/%m/%d")
abline(v = seq(from = year_start, to = year_end, by = "2 years"), col="grey", lty=1)
abline(v = seq(from = year_start, to = year_end, by = "2 years"), col="black", lty=1)
# 보조축 (강수량) 추가, 값을 음수로 변환하여 거꾸로 표시
par(new = TRUE)  # 새로운 그래프를 같은 창에 추가
plot(dates, -precipitation, type = "h", col = "blue",
ylim = c(-600, 0),  # 강수량 범위를 0부터 500까지 반전
axes = FALSE, xlab = "", ylab = "")
plot(dates, -precipitation, type = "h", col = "black",
ylim = c(-600, 0),  # 강수량 범위를 0부터 500까지 반전
axes = FALSE, xlab = "", ylab = "")
# 주축 (지하수위) 그래프 그리기
par(mar = c(4, 4, 2, 4) + 0.1,    # 네모박스의 바깥 여백 설정 (상, 좌, 하, 우)
xaxs = "i",                    # x축 여백 제거
yaxs = "i")                    # y축 여백 제거
# na.exclude() 사용 후 동일한 길이 유지
a<- min(dates)
b<- max(dates)
year_start <- as.Date(paste(format(a, "%Y"), "-01-01", sep=""))
year_start
year_end <- as.Date(paste(format(b, "%Y"), "-01-01", sep=""))
year_end
plot(dates, groundwater, lwd=2, type="l", col="black",
xaxt="n", ylim=c((min(groundwater, na.rm=TRUE)-1), (max(groundwater, na.rm=TRUE)+1)),
xlab="날짜", ylab="지하수위 (m)", xlim=c(year_start, b))
axis.Date(1, at = seq(from = year_start, to = year_end, by = "2 years"), format = "%y/%m/%d")
abline(v = seq(from = year_start, to = year_end, by = "2 years"), col="black", lty=1)
min(groundwater)
max(groundwater)
class(groundwater)
min(groundwater)
min(na.omit(groundwater))
data4 <- data3 %>%
mutate(ELm   = data3$`수위(해수면기준)`)
data4<-subset(data3, data3$시간=="2")
data4 <- data4 %>%
mutate(`수위(해수면기준)`           = as.numeric(`수위(해수면기준)`)) %>%
mutate(`수온(상부)`           =  as.numeric(`수온(상부)`)) %>%
mutate(`전기전도도(상부)`           =  as.numeric(`전기전도도(상부)`))
elav <- mean(data4$`수위(해수면기준)`)
elav
data4<-subset(data4, data4$`수위(지표면기준)`> 0 & data4$`수위(지표면기준)`<=100)
data4<-subset(data4, data4$`수온(상부)`<=28 & data4$`수온(상부)`>=2)
data4<-subset(data4, data4$`전기전도도(상부)`>=0 & data4$`전기전도도(상부)`<=80000)
nros(data4)
nrow(data4)
data4 <- data3 %>%
mutate(ELm   = data3$`수위(해수면기준)`)
nrow(data4)
data4<-subset(data3, data3$시간=="2")
a
nrow(data4)
data4 <- data4 %>%
mutate(`수위(해수면기준)`           = as.numeric(`수위(해수면기준)`)) %>%
mutate(`수온(상부)`           =  as.numeric(`수온(상부)`)) %>%
mutate(`전기전도도(상부)`           =  as.numeric(`전기전도도(상부)`))
data4<-subset(data4, data4$`수위(지표면기준)`> -1 & data4$`수위(지표면기준)`<=100)
nrow(data4)
view(data4)
data4 <- data3 %>%
mutate(ELm   = data3$`수위(해수면기준)`)
data4<-subset(data3, data3$시간=="2")
view(data4)
nrow(data4)-nrow(data14)
data14<-subset(data4, data4$`수위(지표면기준)`> -1 & data4$`수위(지표면기준)`<=100)
nrow(data4)-nrow(data14)
view(data14)
data2 <- data1 %>%
mutate(날짜           = ymd(일자)) %>%
mutate(연도             = year(날짜),
월           = month(날짜),
일           = day(날짜))
data3<- data2 %>%
mutate(일별     = format(날짜, "%m-%d"))
data4 <- data3 %>%
mutate(ELm   = data3$`수위(해수면기준)`)
data4<-subset(data3, data3$시간=="2")
data4 <- data4 %>%
mutate(`수위(해수면기준)`           = as.numeric(`수위(해수면기준)`)) %>%
mutate(`수온(상부)`           =  as.numeric(`수온(상부)`)) %>%
mutate(`전기전도도(상부)`           =  as.numeric(`전기전도도(상부)`))
nrow(data4)
#이상치 제거(기본)----
elav <- mean(data4$`수위(해수면기준)`)
view(data4)
data14<-subset(data4, data4$`수온(상부)`>0 & data4$`수온(상부)`<=25)
nrow(data4)-nrow(data14)
data14<-subset(data4, data4$`수위(지표면기준)`> 0 & data4$`수위(지표면기준)`<=100)
nrow(data4)-nrow(data14)
data14<-subset(data4, data4$`수온(상부)`>0 & data4$`수온(상부)`<=25)
nrow(data4)-nrow(data14)
# 차이가 0.5 이상인 값 제거----
chadata4 <- data14 %>%
arrange(날짜) %>%  # 날짜를 기준으로 정렬
mutate(diff = abs(`수위(해수면기준)` - lag(`수위(해수면기준)`))) %>%  # 바로 전 수위값과의 차이 계산
filter(is.na(diff) | diff < 0.2)  # 차이가 0.2 미만인 데이터만 남기기
nrow(chadata4)-nrow(data4)
#연속적으로 이상한 값 나오는 애들 제거함(계절성 제거로 해결)
data4_a <- chadata4 %>%
time_decompose(`수위(해수면기준)`, method = "stl", frequency = "auto") %>%
anomalize(remainder, method = "iqr") %>%
time_recompose() %>%
filter(anomaly == "No") # 이상치가 아닌 값만 필터링
nrow(chadata4) - nrow(data4_a)
data44 <- data4 %>%
left_join(data4_a %>% dplyr::select(날짜, observed), by = "날짜") %>%
mutate(ELm = if_else(!is.na(observed), observed, NA_real_))
#중복데이터 제거하기
data5 <- data44 %>%
distinct(날짜, .keep_all=TRUE)
df <- merge(data5,rain,by="날짜", all.x=TRUE)
df <- dplyr::select(.data = df, -지점, -지점명)
# 시각화----
#원하는 날짜와 시간 설정
#포항
start_date <- as.Date("1900-01-01")
end_date <- as.Date("2024-11-30")
date_sequence <- seq(from = start_date, to = end_date, by = "day")
date_df <- data.frame(날짜 = date_sequence)
start_groundwater <- min(data5$날짜)
fdate_df <- subset(date_df, date_df$날짜>=start_groundwater)
df1 <- merge(fdate_df, df, by = "날짜", all.x = TRUE)
# 특정 연도만 보고싶을때
#df1<- subset(df, df$연도==2023)
dates <- df1$날짜
groundwater <- df1$ELm
TEMP1 <- df1$`수온(상부)`
TEMP2 <- df1$`수온(하부)`
EC1 <- df1$`전기전도도(상부)`
EC2 <- df1$`전기전도도(하부)`
precipitation <- df1$강수량
length(dates)
length(groundwater)
groundwater <- as.numeric(groundwater)
TEMP1 <- as.numeric(TEMP1)
TEMP2 <- as.numeric(TEMP2)
EC1 <- as.numeric(EC1)
EC2 <- as.numeric(EC2)
class(dates)
class(groundwater)
#view(precipitation)
view(df1)
min(na.omit(groundwater))
chadata44 <- chadata4 %>%
arrange(날짜) %>%  # 날짜를 기준으로 정렬
mutate(diff = abs(`수위(해수면기준)` - lag(`수위(해수면기준)`))) %>%  # 바로 전 수위값과의 차이 계산
filter(is.na(diff) | diff < 0.2)  # 차이가 0.2 미만인 데이터만 남기기
nrow(chadata4)-nrow(chadata44)
df <- merge(data5,rain,by="날짜", all.x=TRUE)
df <- dplyr::select(.data = df, -지점, -지점명)
# 시각화----
#원하는 날짜와 시간 설정
#포항
start_date <- as.Date("1900-01-01")
end_date <- as.Date("2024-11-30")
data44 <- data4 %>%
left_join(chadata4 %>% dplyr::select(날짜, `수위(해수면기준)`) %>%
rename(ELm = `수위(해수면기준)`), by = "날짜")
nrow(chadata4)-nrow(chadata44)
data44 <- data4 %>%
left_join(chadata44 %>% dplyr::select(날짜, `수위(해수면기준)`) %>%
rename(ELm = `수위(해수면기준)`), by = "날짜")
#중복데이터 제거하기
data5 <- data44 %>%
distinct(날짜, .keep_all=TRUE)
df <- merge(data5,rain,by="날짜", all.x=TRUE)
df <- dplyr::select(.data = df, -지점, -지점명)
# 시각화----
#원하는 날짜와 시간 설정
#포항
start_date <- as.Date("1900-01-01")
end_date <- as.Date("2024-11-30")
date_sequence <- seq(from = start_date, to = end_date, by = "day")
date_df <- data.frame(날짜 = date_sequence)
start_groundwater <- min(data5$날짜)
start_groundwater
fdate_df <- subset(date_df, date_df$날짜>=start_groundwater)
df1 <- merge(fdate_df, df, by = "날짜", all.x = TRUE)
# 특정 연도만 보고싶을때
#df1<- subset(df, df$연도==2023)
dates <- df1$날짜
groundwater <- df1$ELm
TEMP1 <- df1$`수온(상부)`
TEMP2 <- df1$`수온(하부)`
EC1 <- df1$`전기전도도(상부)`
EC2 <- df1$`전기전도도(하부)`
precipitation <- df1$강수량
length(dates)
length(groundwater)
groundwater <- as.numeric(groundwater)
TEMP1 <- as.numeric(TEMP1)
TEMP2 <- as.numeric(TEMP2)
EC1 <- as.numeric(EC1)
EC2 <- as.numeric(EC2)
class(dates)
class(groundwater)
#view(precipitation)
view(df1)
min(na.omit(groundwater))
# 차이가 0.5 이상인 값 제거----
chadata4 <- data14 %>%
arrange(날짜) %>%  # 날짜를 기준으로 정렬
mutate(diff = abs(`수위(해수면기준)` - lag(`수위(해수면기준)`))) %>%  # 바로 전 수위값과의 차이 계산
filter(is.na(diff) | diff < 0.2)  # 차이가 0.2 미만인 데이터만 남기기
nrow(chadata4)-nrow(data4)
#한 번 더 제거----
chadata44 <- chadata4 %>%
arrange(날짜) %>%  # 날짜를 기준으로 정렬
mutate(diff = abs(`수위(해수면기준)` - lag(`수위(해수면기준)`))) %>%  # 바로 전 수위값과의 차이 계산
filter(is.na(diff) | diff < 0.2)  # 차이가 0.2 미만인 데이터만 남기기
nrow(chadata4)-nrow(chadata44)
data44 <- data4 %>%
left_join(chadata44 %>% dplyr::select(날짜, `수위(해수면기준)`) %>%
rename(ELm = `수위(해수면기준)`), by = "날짜")
#중복데이터 제거하기
data5 <- data44 %>%
distinct(날짜, .keep_all=TRUE)
df <- merge(data5,rain,by="날짜", all.x=TRUE)
df <- dplyr::select(.data = df, -지점, -지점명)
# 시각화----
#원하는 날짜와 시간 설정
#포항
start_date <- as.Date("1900-01-01")
end_date <- as.Date("2024-11-30")
date_sequence <- seq(from = start_date, to = end_date, by = "day")
date_df <- data.frame(날짜 = date_sequence)
start_groundwater <- min(data5$날짜)
fdate_df <- subset(date_df, date_df$날짜>=start_groundwater)
df1 <- merge(fdate_df, df, by = "날짜", all.x = TRUE)
view(df1)
# 특정 연도만 보고싶을때
#df1<- subset(df, df$연도==2023)
dates <- df1$날짜
view(df1)
# 차이가 0.5 이상인 값 제거----
chadata4 <- data14 %>%
arrange(날짜) %>%  # 날짜를 기준으로 정렬
mutate(diff = abs(`수위(해수면기준)` - lag(`수위(해수면기준)`))) %>%  # 바로 전 수위값과의 차이 계산
filter(is.na(diff) | diff < 0.2)  # 차이가 0.2 미만인 데이터만 남기기
nrow(chadata4)-nrow(data4)
#한 번 더 제거----
chadata44 <- chadata4 %>%
arrange(날짜) %>%  # 날짜를 기준으로 정렬
mutate(diff = abs(`수위(해수면기준)` - lag(`수위(해수면기준)`))) %>%  # 바로 전 수위값과의 차이 계산
filter(is.na(diff) | diff < 0.2)  # 차이가 0.2 미만인 데이터만 남기기
nrow(chadata4)-nrow(chadata44)
view(chadata4)
#연속적으로 이상한 값 나오는 애들 제거함(계절성 제거로 해결)----
data4_a <- chadata44 %>%
time_decompose(`수위(해수면기준)`, method = "stl", frequency = "auto") %>%
anomalize(remainder, method = "iqr") %>%
time_recompose() %>%
filter(anomaly == "No") # 이상치가 아닌 값만 필터링
nrow(chadata44) - nrow(data4_a)
view(data4_a)
data44 <- data4 %>%
left_join(data4_a %>% dplyr::select(날짜, observed), by = "날짜") %>%
mutate(ELm = if_else(!is.na(observed), observed, NA_real_))
#중복데이터 제거하기
data5 <- data44 %>%
distinct(날짜, .keep_all=TRUE)
df <- merge(data5,rain,by="날짜", all.x=TRUE)
df <- dplyr::select(.data = df, -지점, -지점명)
# 시각화----
#원하는 날짜와 시간 설정
#포항
start_date <- as.Date("1900-01-01")
end_date <- as.Date("2024-11-30")
date_sequence <- seq(from = start_date, to = end_date, by = "day")
date_df <- data.frame(날짜 = date_sequence)
start_groundwater <- min(data5$날짜)
fdate_df <- subset(date_df, date_df$날짜>=start_groundwater)
df1 <- merge(fdate_df, df, by = "날짜", all.x = TRUE)
# 특정 연도만 보고싶을때
#df1<- subset(df, df$연도==2023)
dates <- df1$날짜
groundwater <- df1$ELm
TEMP1 <- df1$`수온(상부)`
TEMP2 <- df1$`수온(하부)`
EC1 <- df1$`전기전도도(상부)`
EC2 <- df1$`전기전도도(하부)`
precipitation <- df1$강수량
length(dates)
length(groundwater)
groundwater <- as.numeric(groundwater)
TEMP1 <- as.numeric(TEMP1)
TEMP2 <- as.numeric(TEMP2)
EC1 <- as.numeric(EC1)
EC2 <- as.numeric(EC2)
#view(precipitation)
view(df1)
min(na.omit(groundwater))
# 주축 (지하수위) 그래프 그리기
par(mar = c(4, 4, 2, 4) + 0.1,    # 네모박스의 바깥 여백 설정 (상, 좌, 하, 우)
xaxs = "i",                    # x축 여백 제거
yaxs = "i")                    # y축 여백 제거
# na.exclude() 사용 후 동일한 길이 유지
a<- min(dates)
b<- max(dates)
year_start <- as.Date(paste(format(a, "%Y"), "-01-01", sep=""))
year_start
year_end <- as.Date(paste(format(b, "%Y"), "-01-01", sep=""))
year_end
plot(dates, groundwater, lwd=2, type="l", col="black",
xaxt="n", ylim=c((min(groundwater, na.rm=TRUE)-1), (max(groundwater, na.rm=TRUE)+1)),
xlab="날짜", ylab="지하수위 (m)", xlim=c(year_start, b))
axis.Date(1, at = seq(from = year_start, to = year_end, by = "2 years"), format = "%y/%m/%d")
abline(v = seq(from = year_start, to = year_end, by = "2 years"), col="black", lty=1)
# 보조축 (강수량) 추가, 값을 음수로 변환하여 거꾸로 표시
par(new = TRUE)  # 새로운 그래프를 같은 창에 추가
plot(dates, -precipitation, type = "h", col = "black",
ylim = c(-600, 0),  # 강수량 범위를 0부터 500까지 반전
axes = FALSE, xlab = "", ylab = "")
#보조축 라벨 및 축 추가 (위에서 아래로 0~500으로 표시)
axis(4, at = seq(0, -600, by = -100), labels = seq(0, 600, by = 100), col = "black", col.axis = "black")
# 주축 (지하수위) 그래프 그리기
par(mar = c(4, 4, 2, 4) + 0.1,    # 네모박스의 바깥 여백 설정 (상, 좌, 하, 우)
xaxs = "i",                    # x축 여백 제거
yaxs = "i")                    # y축 여백 제거
plot(dates, groundwater, lwd=2, type="l", col="black",
xaxt="n", ylim=c((min(groundwater, na.rm=TRUE)-1), (max(groundwater, na.rm=TRUE)+1)),
xlab="", ylab="Level (EL.m)", xlim=c(year_start, b))
axis.Date(1, at = seq(from = year_start, to = year_end, by = "2 years"), format = "%y/%m/%d")
abline(v = seq(from = year_start, to = year_end, by = "2 years"), col="black", lty=1)
# 보조축 (강수량) 추가, 값을 음수로 변환하여 거꾸로 표시
par(new = TRUE)  # 새로운 그래프를 같은 창에 추가
plot(dates, -precipitation, type = "h", col = "black",
ylim = c(-600, 0),  # 강수량 범위를 0부터 500까지 반전
axes = FALSE, xlab = "", ylab = "")
#보조축 라벨 및 축 추가 (위에서 아래로 0~500으로 표시)
axis(4, at = seq(0, -600, by = -100), labels = seq(0, 600, by = 100), col = "black", col.axis = "black")
mtext("Rainfal (mm)", side = 4, line = 3, col = "black")
png("output_test.png", width = 635, height = 900)
# 그래프 레이아웃 설정 (세로로 3개)
par(mfrow = c(3, 1))
# na.exclude() 사용 후 동일한 길이 유지
a<- min(dates)
b<- max(dates)
year_start <- as.Date(paste(format(a, "%Y"), "-01-01", sep=""))
year_start
year_end <- as.Date(paste(format(b, "%Y"), "-01-01", sep=""))
year_end
plot(dates, groundwater, lwd=2, type="l", col="black",
xaxt="n", ylim=c((min(groundwater, na.rm=TRUE)-1), (max(groundwater, na.rm=TRUE)+1)),
xlab="", ylab="Level (EL.m)", xlim=c(year_start, b))
plot(dates, groundwater, lwd=2, type="l", col="black",
xaxt="n", ylim=c((min(groundwater, na.rm=TRUE)-1), (max(groundwater, na.rm=TRUE)+1)),
xlab="", ylab="Level (EL.m)", xlim=c(year_start, b))
axis.Date(1, at = seq(from = year_start, to = year_end, by = "2 years"), format = "%y/%m/%d")
abline(v = seq(from = year_start, to = year_end, by = "2 years"), col="black", lty=1)
# 주축 (지하수위) 그래프 그리기
par(mar = c(4, 4, 2, 4) + 0.1,    # 네모박스의 바깥 여백 설정 (상, 좌, 하, 우)
xaxs = "i",                    # x축 여백 제거
yaxs = "i")                    # y축 여백 제거
# na.exclude() 사용 후 동일한 길이 유지
a<- min(dates)
b<- max(dates)
year_start <- as.Date(paste(format(a, "%Y"), "-01-01", sep=""))
year_start
year_end <- as.Date(paste(format(b, "%Y"), "-01-01", sep=""))
year_end
plot(dates, groundwater, lwd=2, type="l", col="black",
xaxt="n", ylim=c((min(groundwater, na.rm=TRUE)-1), (max(groundwater, na.rm=TRUE)+1)),
xlab="", ylab="Level (EL.m)", xlim=c(year_start, b))
# 주축 (EC1,2) 그래프 그리기
par(mar = c(4, 4, 2, 4) + 0.1,    # 네모박스의 바깥 여백 설정 (상, 좌, 하, 우)
xaxs = "i",                    # x축 여백 제거
yaxs = "i")                    # y축 여백 제거
# na.exclude() 사용 후 동일한 길이 유지
a<- min(dates)
b<- max(dates)
year_start <- as.Date(paste(format(a, "%Y"), "-01-01", sep=""))
year_start
year_end <- as.Date(paste(format(b, "%Y"), "-01-01", sep=""))
year_end
plot(dates, EC1, lwd=2, type="l", col="black",
xaxt="n", ylim=c((min(groundwater, na.rm=TRUE)-1), (max(groundwater, na.rm=TRUE)+1)),
xlab="", ylab="Level (EL.m)", xlim=c(year_start, b))
library(tidyverse)
library(magick)
library(scales)
library(readxl)
library(scales)
library(ggbreak)
library(GGally)
library(ggpubr)
library(lawstat)
library(nparcomp)
library(psych)
library(corrplot)
library(writexl)
library(fpp3)
library(report)
library(forecast)
library(lubridate)
library(dplyr)
library(tidyr)
library(stats)
library(purrr)
library(zoo)
library(trend)
library(MASS)
library(openxlsx)
options(scipen = 100)
